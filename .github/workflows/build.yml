name: Version Check and Publish

on:
  push:
    branches:
      - main

env:
  should_publish: 'false'
  should_update: 'false'

jobs:
  check-version:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Get current version from package.json
        id: pkg
        run: echo "::set-output name=version::$(node -p "require('./package.json').version")"

      - name: Get latest version from npm (configurable)
        id: npm
        run: echo "::set-output name=version::$(npm view ${{ github.event.inputs.package-name }} version)"

      - name: Compare versions and write to environment files
        run: |
          if [ "${{ steps.pkg.outputs.version }}" = "${{ steps.npm.outputs.version }}" ]; then
            echo "should_update=true" >> $GITHUB_ENV
          else
            echo "should_publish=true" >> $GITHUB_ENV
          fi

  build:
    needs: check-version
    if: ${{ env.should_publish == 'true' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Build
        run: rm -rf dist && npm run build

      - name: Create package.json in dist/cjs and dist/esm
        run: |
          echo '{"type": "commonjs"}' > dist/cjs/package.json
          echo '{"type": "module"}' > dist/esm/package.json

      - name: Delete useless dist/src
        run: rm -rf dist/src

  publish:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Publish package on NPM
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  update-version:
    needs: check-version
    if: ${{ env.should_update == 'true' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Update version to next patch
        run: npm version patch

  create-pr:
    needs: update-version
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create a pull request
        uses: peter-evans/create-pull-request@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "Update version to next patch"
          title: "Update version to next patch"
          body: "This PR updates the package version to the next patch version."
          branch: update-version
          base: main
